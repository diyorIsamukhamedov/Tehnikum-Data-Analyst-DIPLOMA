# Домашнее задание

# 1. Сделать School management system с возможность добавлять, удалять,
# редактировать учеников в первых классах(4 класса). Весь функционал 
# прописать через функции

# 2.Мини-ролик или конспект по теме

# 3. Повторить все темы и подготовить вопросы по базовому синтаксису

#############################################################################################
# База данных учеников (ключ – это класс, а значение – это список учеников)
school_db = {
    "1А": [],
    "1Б": [],
    "1В": [],
    "1Г": []
}

#################################################################
# Реализация логики для добавления ученика через функцию
def add_student(name, class_name):
     # Проверяем, существует ли указанный класс в базе данных
    if class_name not in school_db:
        return "Ошибка: такого класса не существует!"

     # Проверяем, есть ли уже ученик с таким именем в этом классе
    if name in school_db[class_name]:
        return f"Ученик {name} уже есть в классе {class_name}."

    # Добавляем ученика в список учеников указанного класса
    school_db[class_name].append(name)
    return f"Ученик {name} добавлен в класс {class_name}."
#################################################################

#################################################################
# Реализация логики для удаления ученика через функцию
def remove_student(name):
    # Проходим по всем классам и их спискам учеников
    for class_name in school_db:
        students = school_db[class_name]  # Получаем список учеников этого класса

        # Если имя ученика найдено в списке класса, удаляем его
        if name in students:
            students.remove(name)  # Удаляем ученика из списка
            return f"Ученик {name} удалён из класса {class_name}"  # Сообщаем об удалении

    # Если ученик не найден в базе данных, возвращаем сообщение об ошибке
    return "Ошибка: ученик не найден."
#################################################################

#################################################################
# Функция редактирования ученика (смена имени или класса по выбору)
def edit_student(old_name, new_name=None, new_class=None):
    # Ищем ученика в каждом классе
    for class_name in school_db:
        if old_name in school_db[class_name]:
            # Если передано новое имя, меняем его
            if new_name:
                index = school_db[class_name].index(old_name) # Находим индекс ученика
                school_db[class_name][index] = new_name # Меняем имя

            # Если передан новый класс, перемещаем ученика
            if new_class:
                # Проверяем, существует ли новый класс
                if new_class not in school_db:
                    return "Ошибка: такого класса нет!"

                # Удаляем ученика из старого класса
                school_db[class_name].remove(old_name)

                # Добавляем ученика в новый класс, учитывая новое имя (если оно передано)
                school_db[new_class].append(new_name if new_name else old_name)

            return "Ученик изменён!"

    # Если ученик не найден в базе данных, возвращаем сообщение об ошибке
    return "Ошибка: ученик не найден."
#################################################################

#################################################################
# Функция вывода всех учеников
def show_students():
    result = "\nСписок учеников по классам\n"

    # Перебираем все классы и их списки учеников
    for class_name in school_db:
        students = school_db[class_name]

        # Если в классе есть ученики, выводим их список через запятую
        if students:
            print(class_name, ":", ", ".join(students))
        else:
            # Если класс пуст, выводим соответствующее сообщение
            print(class_name, ": Нет учеников")
#################################################################